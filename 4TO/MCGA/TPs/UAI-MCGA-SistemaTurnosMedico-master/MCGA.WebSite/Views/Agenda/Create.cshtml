@model MCGA.Entities.Agenda
@{
    ViewBag.Title = "Agenda";
    ViewBag.Description = "En esta página vamos a poder agregar agendas del sistema.";
    ViewBag.Author = Application.Name;
    ViewBag.ReferrerMode = ReferrerMode.OriginWhenCrossOrigin;
    ViewBag.TwitterCard = new SummaryLargeImageTwitterCard("@TwitterCard");
    ViewBag.OpenGraph = new OpenGraphBusiness(
        ViewBag.Title,
        new OpenGraphImage(Url.AbsoluteContent("~/fonts/icons/open-graph-1200x630.png")) { Height = 630, Type = ContentType.Png, Width = 1200 },
        new OpenGraphContactData(Application.StreetAddress, Application.Locality, Application.PostalCode, Application.Country)
        {
            Email = Application.Email,
            Phone = Application.Phone,
            Website = Url.AbsoluteRouteUrl(AgendaControllerRoute.GetCreate)
        },
        new OpenGraphLocation(Application.Latitude, Application.Longitude))
    {
        Determiner = OpenGraphDeterminer.Blank,
        SiteName = Application.Name
    };
}
<h2>Nueva <small>agenda</small> </h2>

<hr class="hrSinMarginTop" />
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal content-personalizado">

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group">
        @Html.Label("Profesional", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBox("BuscarProfesional", (String)ViewBag.ProfesionalTexto,
            new
            {
                @class = "form-control",
                autocomplete = "off",
                placeholder = "Ingrese el profesional",
            })
            @Html.Hidden("ProfesionalId", (String)ViewBag.ProfesionalId)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.EspecialidadProfesionalId, null, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBox("BuscarEspecialidad", (String)ViewBag.EspecialidadTexto,
            new
            {
                @class = "form-control",
                autocomplete = "off",
                placeholder = "Ingrese la especialidad",
            })
            @Html.ValidationMessageFor(model => model.EspecialidadProfesionalId, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.EspecialidadProfesionalId)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.TipoDiaId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("TipoDiaId", null, "-Seleccionar día-", htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.TipoDiaId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.fecha_desde, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.fecha_desde, new { htmlAttributes = new { @class = "form-control", @min = "1900-01-01" } })
            @Html.ValidationMessageFor(model => model.fecha_desde, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.fecha_hasta, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.fecha_hasta, new { htmlAttributes = new { @class = "form-control", @min = "1900-01-01" } })
            @Html.ValidationMessageFor(model => model.fecha_hasta, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.hora_desde, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.hora_desde, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.hora_desde, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.hora_hasta, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.hora_hasta, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.hora_hasta, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group text-right paddingLeftRight_15">
        <button type="submit" class="btn btn-primary">
            <i class="fa fa-check-circle"></i>
            Guardar
        </button>
    </div>
</div>

}

<div>
    <a class="btn btn-sm" href="@Url.Action("Index", "Agenda")">
        <i class="fa fa-chevron-circle-left"></i>
        Volver al listado
    </a>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $("#BuscarEspecialidad").autocomplete({
            autoSelect: true,
            autoFocus: true,
            minLength: 1,
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetEspecialidadProfesionalByProfesional", "EspecialidadesProfesional")',
                    datatype: "json",
                    data: { Areas: '', term: request.term, idProfesional: $("#ProfesionalId").val() },
                    success: function (data) {

                        response($.map(data, function (val, item) {
                            return { label: val.Name, value: val.Name, Id: val.Id };
                        }));
                    }
                });
            },
            select: function (event, ui) {
                $("#EspecialidadProfesionalId").val(ui.item.Id);
            }
        });

        $("#BuscarProfesional").autocomplete({
            autoSelect: true,
            autoFocus: true,
            minLength: 1,
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetProfesional", "Profesional")',
                    datatype: "json",
                    data: { Areas: '', term: request.term },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return { label: val.Name, value: val.Name, Id: val.Id };
                        }));
                    }
                });
            },
            select: function (event, ui) {
                $("#ProfesionalId").val(ui.item.Id);
            }
        });
    </script>
}